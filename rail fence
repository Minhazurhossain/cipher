//just encryption
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
main()
{
    int i,j,len,rails,count,code[100][1000];
    char str[1000];
    printf("Enter a Secret Message");
    gets(str);
    len=strlen(str);
    printf("Enter number of rails\n");
    scanf("%d",&rails);
    for(i=0;i<rails;i++)
    {
        for(j=0;j<len;j++)
        {
            code[i][j]=0;
        }
    }
count=0;
j=0;
while(j<len)
{
if(count%2==0)
{
    for(i=0;i<rails;i++)
    {
        //strcpy(code[i][j],str[j]);
        code[i][j]=(int)str[j]; 
        j++;
    }

}
else
{

    for(i=rails-2;i>0;i--)
    {
        code[i][j]=(int)str[j];
    j++;
    }       
}   

count++;
}

for(i=0;i<rails;i++)
{
    for(j=0;j<len;j++)
    {
        if(code[i][j]!=0)
        printf("%c",code[i][j]);
    }

}
}

//method 2
#include<iostream>
#include<string.h>
 
using namespace std;
 
void encryptMsg(char msg[], int key){
    int msgLen = strlen(msg), i, j, k = -1, row = 0, col = 0;
    char railMatrix[key][msgLen];
 
    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            railMatrix[i][j] = '\n';
 
    for(i = 0; i < msgLen; ++i){
        railMatrix[row][col++] = msg[i];
 
        if(row == 0 || row == key-1)
            k= k * (-1);
 
        row = row + k;
    }
 
    cout<<"\nEncrypted Message: ";
 
    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            if(railMatrix[i][j] != '\n')
                cout<<railMatrix[i][j];
}
 
void decryptMsg(char enMsg[], int key){
    int msgLen = strlen(enMsg), i, j, k = -1, row = 0, col = 0, m = 0;
    char railMatrix[key][msgLen];
 
    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            railMatrix[i][j] = '\n';
 
    for(i = 0; i < msgLen; ++i){
        railMatrix[row][col++] = '*';
 
        if(row == 0 || row == key-1)
            k= k * (-1);
 
        row = row + k;
    }
 
    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            if(railMatrix[i][j] == '*')
                railMatrix[i][j] = enMsg[m++];
 
    row = col = 0;
    k = -1;
 
    cout<<"\nDecrypted Message: ";
 
    for(i = 0; i < msgLen; ++i){
        cout<<railMatrix[row][col++];
 
        if(row == 0 || row == key-1)
            k= k * (-1);
 
        row = row + k;
    }
}
 
int main(){
    char msg[] = "Hello World";
    char enMsg[] = "Horel ollWd";
    int key = 3;
 
    cout<<"Original Message: "<<msg;
 
    encryptMsg(msg, key);
    decryptMsg(enMsg, key);
    
    return 0;
}

//method 3
 // cretaing new matrix
char railmat[key][message.length()];
for (int i =0;i<key;i++){
 for(int j=0;j<message.length();j++){
           railmat[i][j]='*';
}
}

//testing
for (int i =0;i<key;i++){
 for(int j=0;j<message.length();j++){
           cout<<railmat[i][j];
}
cout<<endl;
}

//input letter one by one
int row=0;
int check=0;
for(int i=0;i<message.length();i++){
 if(check==0)
{
   railmat[row][i]=message[i];
   row++;
if(row==key){
check=1;
row--;
}
}
else if(check==1){
row--;
railmat[row][i]=message[i];
if(row==0){
check=0;
row=1;
}
}
}
}

//encrypted text
string encrptext="";
//testing
for (int i =0;i<key;i++){
 for(int j=0;j<message.length();j++){
          encrptext+=railmat[i][j];
}

}
//removing * from text
encrptext=regex_replace(encrptext,regex("\\*"),"");
cout<<encrptext;



decrypt(){
int order=0;
for(int  i=0;i<key;i++){
for(int j=0;j<message.length();j++){
string temp="";
temp+=railmat[i][j];
if(regex_match(temp,regex("\\*"))){
continue;
}
else{
railmat[i][j]=message[order];
order++;
}
}
}
for (int i =0;i<key;i++){
 for(int j=0;j<message.length();j++){
           cout<<railmat[i][j];
}
cout<<endl;
}

string decryptext="";
check=0;
row=0;
for(int i=0;i<message.length();i++){
 if(check==0)
{
   decryptext+=railmat[row][i];
   row++;
if(row==key){
check=1;
row--;
}
}
else if(check==1){
row--;
decryptext+=railmat[row][i];
if(row==0){
check=0;
row=1;
}
}
}
}
decryptext=regex_replace(encrptext,regex("\\*"),"");
cout<<decryptext;
